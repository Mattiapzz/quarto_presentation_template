---
title: "Template Presentation for conferences, workshops, and seminars"
subtitle: "Subtitle if long enough otherwise stick to the main title"
# author: 
#   - "Mattia Piazza"
#   - "Francesco Biral"
author: "Mattia Piazza, Francesco Biral"
date: today
# date-format: long
date-format: "D MMMM YYYY"
resources: data
filters:
  - tikz
  - pyodide
execute: 
  python: "/Users/mattiapiazza/miniconda3/envs/py39/bin/python"
  enabled: true
slide-level: 2
format:
  revealjs: 
    # Output file
    output-file: index.html
    # template-partials:
    #   - title-slide.html
    # Table of Contents
    toc: true
    toc_float: true
    toc-depth: 1
    toc-location: body
    toc-title: "Contents"
    # Generate a self contained file
    self-contained: true
    self-contained-math: true
    # template-partials:
    #   - title-slide.html
    theme: [ custom.scss]
    slideNumber: true
    center: false 
    transition: slide
    # logo and footer: 
    # logo: unitn.png
    footer: "Mattia Piazza | University of Trento, Italy"
    auto-play-media: true
    width: 1920
    height: 1080
    html-math-method: mathjax
    code-fold: true
    # chalkboard: true
jupyter: python3
---

# TEST

<!-- brief text in section slide -->

## Test subsection 1

# Test section 2


## Subsection 1


lorem ipsum 

lorem ipsum 
lorem ipsum 



## Video test


{{< video https://www.youtube.com/embed/xQ_T96IjGP8?si=w0eF2kz1KAq1Rk2t&amp;start=61 width="100%" height="85%" autoplay="true" loop="true" muted="true">}}


## BBOX test

two different ways to create a bbox like latex

<!-- ```{=html}
<div class="tbboxh">
    <div class="tbboxh-title">My Custom Title</div>
    <p>This is an example box in a Quarto Reveal.js presentation.</p>
</div> -->
<!-- ``` -->

::: {.tbbox}
<!-- #### My Custom Title -->
::: {.titlebox}
My Custom Title  
:::


This is an example box in a Quarto Reveal.js presentation.

- item 1
- item 2
- item 3
:::


## Math Example

$$
\begin{aligned}
\dot{x} & = \sigma(y-x) \\
\dot{y} & = \rho x - y - xz \\
\dot{z} & = -\beta z + xy
\end{aligned}
$$


## last

<!-- ``` {.tikz embed_mode="link" scale=3 filename="example" format="svg"}
\node[draw, circle] (A) at (0,0) {A};
\node[draw, circle] (B) at (2,2) {B};
\node[draw, circle] (C) at (4,0) {C};
\node[draw, circle] (seven) at (5,1) {888888};
\draw[->] (A) -- (B);
\draw[->] (B) -- (C);
\draw[->] (C) -- (A);
``` -->

## test {background-image="https://youtu.be/wo9vZccmqwc?autoplay=1"}

## test {background-color="red"}

![](data/logo.png){fig-align="center" fig-width="50%"}


## local video (black border)

{{< video data/picci.mp4 >}}

## {background-video="data/end.mov" background-video-loop="true" background-video-muted="true" background-video-autoplay="true"}

::: {.tbbox}
Full page video no title
:::

## {background-video="data/picci.mp4"}

::: {.tbbox}
test
:::

## Html

```{=html}
<!-- add video -->
<div style="display: flex; justify-content: center;">
  <video width="100%" height="100%" autoplay loop muted controls>
    <source src="data/picci.mp4" type="video/mp4">
  </video>
</div>
```

## Multiple columns

::: {.columns}

::: {.column width="50%"}
This is a column

- item 1
- item 2

:::

::: {.column width="50%"}
This is another column

- item 1

:::

:::

## Tables

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

<!-- ## table from latex

```{=latex}
\usepackage{tabularx}
\begin{table}[H]
\centering
\begin{tabular}{|c|c|c|}
\hline
\textbf{Header 1} & \textbf{Header 2} & \textbf{Header 3} \\ \hline
Cell 1 & Cell 2 & Cell 3 \\ \hline
Cell 4 & Cell 5 & Cell 6 \\ \hline
\end{tabular}
\end{table}
``` -->


## Standard Code

```{python}
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y)
plt.show()
```



## Interactive Code

Taken from [pyodide](https://github.com/coatless-quarto/pyodide). Intall if with 
```{bash}
quarto add coatless-quarto/pyodide   
```

Usage

```{pyodide-python}
n = 5
while n > 0:
  print(n)
  n = n - 1

print('Blastoff!')
```

## code c++

```{.cpp}
#include <iostream>

int main() {
  std::cout << "Hello, World!" << std::endl;
  return 0;
}
```

## code matlab

```{.matlab}
x = linspace(0, 10, 100);
y = sin(x);
```

## Section {background-color="red"}

test